#!/bin/bash
DIRNAME=`dirname "$0"`
READLINK=`readlink "$0" || true`
LINKDIRNAME=`dirname "$READLINK"`
NORMDIR="$LINKDIRNAME"
[ ! "${LINKDIRNAME:0:1}" = "/" ] && NORMDIR="$DIRNAME/$LINKDIRNAME"
NORMDIR=`cd "$NORMDIR"; pwd`

SHASUM_BIN=shasum
hash $SHASUM_BIN 2>/dev/null || SHASUM_BIN=sha1sum

##
## set up logging
##
MACHINEID="$HOSTNAME.${BASH_VERSINFO[5]}"
[ -z "${debian_chroot:-}" -a -r /etc/debian_chroot ] && debian_chroot=$(cat /etc/debian_chroot)
[ -n "$debian_chroot" ] && MACHINEID+=".$debian_chroot"
LOGPATH="$NORMDIR/testlogs.$MACHINEID"
BOOTSTRAP_PREFIX="normstrap.$MACHINEID"
BOOTSTRAP_GZ="$BOOTSTRAP_PREFIX.tar.gz"
NORMTEST_PREFIX="normtest.$MACHINEID"
mkdir -p "$LOGPATH"
LOGFILE=
sigint() {
    echo "Cancelled compilation of $file"
    [ -e "$INPUT_LOG" ] && cp -f "$INPUT_LOG" "$LOGPATH/$LOGNAME.cancelled"
    exit 1
}
trap sigint SIGINT


##
## prepare norm bootstrap
##
set -eE
rm -rf $HOME/"$BOOTSTRAP_PREFIX"
if [ ! -e "$LOGPATH/$BOOTSTRAP_GZ" ]; then
    pushd "$HOME"
    $NORMDIR/norm -p "$HOME/$BOOTSTRAP_PREFIX" install ccache # needs to be installed first
    $NORMDIR/norm -p "$HOME/$BOOTSTRAP_PREFIX" install tar # old tar won't support xz, fix that and make other compilations use it
    $NORMDIR/norm -p "$HOME/$BOOTSTRAP_PREFIX" install xz bzip2 gzip curl
    $NORMDIR/norm -p "$HOME/$BOOTSTRAP_PREFIX" install gcc

    ## bin will be in PATH, so remove stuff that will get in our way
    cd "$HOME/$BOOTSTRAP_PREFIX/bin"
    rm -vf attr c_rehash chacl curl-config getfacl getfattr idn setfacl setfattr *pkg-config
    cd ..
    strip -gp libexec/gcc/*/*/* || true
    rm -rf tmp/compile
    cd $HOME
    mkdir -p $LOGPATH
    tar zcf "$LOGPATH/$BOOTSTRAP_GZ" "$BOOTSTRAP_PREFIX"
fi
export PATH="$HOME/$BOOTSTRAP_PREFIX/bin/ccache_wrap:$HOME/$BOOTSTRAP_PREFIX/bin:$PATH"
tar xf "$LOGPATH/$BOOTSTRAP_GZ" -C "$HOME"
export LD_LIBRARY_PATH="$HOME/$BOOTSTRAP_PREFIX/lib"
set +eE

LIST="$@"
[ -z "$LIST" ] && LIST=`find "$NORMDIR"/packages -maxdepth 1 -type f|sort -u`

##
## compile each package and save logs
for file in $LIST; do
    # calculate names and paths
    FORMULA=${file#$NORMDIR/packages/}
    SHA1SUM=`$SHASUM_BIN "$NORMDIR/packages/$FORMULA" | cut -f1 -d' '`
    INPUT_LOG="$HOME/$NORMTEST_PREFIX/var/log/norm/$FORMULA.$SHA1SUM.log"
    LOGNAME=`basename -- "$INPUT_LOG"`
    LOGFILE="$LOGPATH/$LOGNAME"
    TMPFILE=`mktemp -t norm-testall-XXXXXXXXX`

    [ -f "$LOGFILE" -o -f "$LOGFILE".gz ] && continue # successful logfile exists, skip the package

    # start afresh
    rm -rf "$HOME/$NORMTEST_PREFIX"
    rm -f "$LOGPATH/$FORMULA"*.err

    # attempt to build the FORMULA
    $NORMDIR/norm -p "$HOME/$NORMTEST_PREFIX" install "$FORMULA"
    install_status=$?
    if [ "$install_status" == "0" ]; then
        LD_LIBRARY_PATH= LD_PRELOAD= $NORMDIR/norm -p "$HOME/$NORMTEST_PREFIX" ldd 2>&1 | fgrep -v 'files, checking if' > "$TMPFILE"
        [ -e "$TMPFILE" -a ! -s "$TMPFILE" ] && ldd_status=0
    fi
    if [ "$ldd_status" == "0" ]; then
        # norm ldd output is ok, time to handle the log
        cp -f "$INPUT_LOG" "$LOGPATH/"
        gzip "$LOGFILE"
    else
        # either norm install or norm ldd failed -- save the log and build environment
        cp "$INPUT_LOG" "$LOGPATH/"
        cat "$TMPFILE" >> "$LOGFILE"
        mv -f "$LOGFILE"{,.err} # install failure, rename the log to indicate that
        pushd $HOME
        tar zcf "norm-fail-$MACHINEID-$FORMULA.tar.gz" "$NORMTEST_PREFIX"
        popd
    fi
    rm -f "$TMPFILE"
    unset ldd_status
done

ERRORS=($LOGPATH/*.err)
if [ -n "$ERRORS" ]; then
    echo These packages have failed to build:
    for file in "${ERRORS[@]}"; do
        FORMULA=${file%.*.log.err}
        FORMULA=${FORMULA#$LOGPATH/}
        echo $FORMULA
    done
    exit 1
fi
