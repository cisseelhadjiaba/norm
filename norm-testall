#!/usr/bin/env bash

set -eE
set -o pipefail

DIRNAME=`dirname "$0"`
READLINK=`readlink "$0" || true`
LINKDIRNAME=`dirname "$READLINK"`
NORMDIR="$LINKDIRNAME"
[ ! "${LINKDIRNAME:0:1}" = "/" ] && NORMDIR="$DIRNAME/$LINKDIRNAME"
NORMDIR=`cd "$NORMDIR"; pwd`

. "$NORMDIR"/norm_common

##
## set up variables
NORMTEST_PREFIX="$HOME/norm.test.$MACHINEID"
NORMTEST_PREFIXNAME=`basename "$NORMTEST_PREFIX"`
LOGPATH="$NORMDIR/testlogs/$MACHINEID"

## create output directories
mkdir -p "$NORMDIR/testlogs"
mkdir -p "$LOGPATH"

# Usage: JAILPATH=$(jailpath tools)
jailpath() {
    [[ -z $1 ]] && log "SHOULD NOT HAPPEN: invalid usage of jailname()!" && exit 1
    JAILNAME="$1"
    JAILPATH="norm.jail.$JAILNAME.$MACHINEID"
    echo $JAILPATH
}

do_strip() {
    strip -gp "$@" || true
}

# Usage: prepare_jail tools xz ccache curl bzip2
prepare_jail() {
    [[ -z $2 ]] && log "SHOULD NOT HAPPEN: invalid usage of prepare_jail()!" && exit 1
    JAILNAME="$1"
    JAILPATH=$(jailpath "$JAILNAME")
    JAILFULLPATH="$HOME/$JAILPATH"
    JAILLOG="$NORMDIR/testlogs/$JAILPATH.log"
    JAILARCHIVE="$NORMDIR/testlogs/$JAILPATH.tar.gz"
    shift
    rm -rf "$JAILFULLPATH"
    ## if have archive, extract and done
    if [[ -e $JAILARCHIVE ]]; then
        tar xf "$JAILARCHIVE" -C "$HOME"
        return 0
    fi
    ## clear the bootstrap log
    > "$JAILLOG"
    FORMULAS=("$@")
    echo Will build in $JAILPATH:
    printf " * %s\n" "${FORMULAS[@]}"

    "$NORMDIR"/norm -p "$JAILFULLPATH" install "${FORMULAS[@]}" 2>&1 | tee -a "$JAILLOG"
    rm -vf   "$JAILFULLPATH"/bin/{aclocal*,auto*,c_rehash,*-config,idn,ifnames,libtool,libtoolize,m4,openssl}
    do_strip "$JAILFULLPATH"/{bin,lib,lib32}/*
    do_strip "$JAILFULLPATH"/libexec/gcc/*/*/*


    tar zcf "$JAILARCHIVE" -C "$HOME" "$JAILPATH"
}

## build the set that can compile all our formulas
prepare_jail tools xz curl bzip2
JAIL_TOOLS=$(jailpath tools)
if ! have_gcc 4.9; then
    prepare_jail gcc gcc-4.9 ccache
    JAIL_GCC=$(jailpath gcc)
    addpath PATH $HOME/$JAIL_GCC/bin{,/ccache_wrap}
    export CC=gcc-4.9
    export CXX=g++-4.9
fi

addpath PATH $HOME/$JAIL_TOOLS/bin{,/ccache_wrap}

## we don't want pipefail anymore -- failures to compile are handles by ourselves from now on
set +o pipefail

## check if were given list of packages, if not, try all of them
LIST=($@)
[ -z "$LIST" ] && LIST=("$NORMDIR"/packages/*)

##
## compile each package and save logs
for FORMULA_NAME in "${LIST[@]}"; do
    # calculate formula name and file path
    FORMULA_NAME=${FORMULA_NAME#$NORMDIR/packages/} ## get rid of paths if any
    FORMULA_FILE="$NORMDIR/packages/$FORMULA_NAME"  ## we want full path here
    [ -f "$FORMULA_FILE" ] || continue              ## must be a file

    # calculate formula ID
    SHA1SUM=`$SHASUM_BIN "$FORMULA_FILE" | cut -f1 -d' '`
    FORMULA_ID="$FORMULA_NAME.$SHA1SUM"

    # check if we've done this formula before
    [ -f "$LOGPATH/$FORMULA_ID.log.gz" ] && continue ## successful logfile exists, skip the formula

    # clean up output prefix
    rm -rf "$NORMTEST_PREFIX"
    # clean up output logfiles
    rm -f "$LOGPATH/$FORMULA_NAME".*

    unset FAILURE

    # do it
    "$NORMDIR/norm" -p "$NORMTEST_PREFIX" install "$FORMULA_NAME" 2>&1 | tee "$LOGPATH/$FORMULA_ID.log"
    BUILDSTATUS="${PIPESTATUS[0]}"
    [ $BUILDSTATUS != 0 ] && FAILURE=1

    # compile success, check if ldd has any output
    env - "$NORMDIR/norm-ldd" -q "$NORMTEST_PREFIX" | tee -a "$LOGPATH/$FORMULA_ID.log"
    [ "${PIPESTATUS[0]}" != "0" ] && FAILURE=1

    # write list of packages that had been built
    "$NORMDIR/norm" -p "$NORMTEST_PREFIX" list 2>&1 | tee -a "$LOGPATH/$FORMULA_ID.log"

    # write list of packages that had been built
    "$NORMDIR/norm" -p "$NORMTEST_PREFIX" dot 2>&1 | tee -a "$LOGPATH/$FORMULA_ID.log"

    if [ -z "$FAILURE" ]; then
        gzip "$LOGPATH/$FORMULA_ID.log"
    elif [ -e "$HOME/$NORMTEST_PREFIXNAME" ]; then
        tar zcf "$LOGPATH/$FORMULA_ID.tar.gz" -C "$HOME" "$NORMTEST_PREFIXNAME" || true
    fi
done

##
## list package names that didn't build cleanly
ERRORS=($LOGPATH/*.log)
if [ -n "$ERRORS" ] && [ -e "$ERRORS" ]; then
    echo These packages have failed to build:
    for file in "${ERRORS[@]}"; do
        [ -e "$file" ] || continue
        # normalize the formula name out of the logpath
        FORMULA=${file%.*.log}
        FORMULA=${FORMULA#$LOGPATH/}
        echo $FORMULA
    done
    exit 1
fi
