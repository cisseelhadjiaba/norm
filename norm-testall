#!/usr/bin/env bash
set -eE
set -o pipefail

unset ABORT_ON_FAIL
while getopts "a" opt; do
    case $opt in
    a)
        ABORT_ON_FAIL=true
        shift
        ;;
    esac
done

DIRNAME=`dirname "$0"`
READLINK=`readlink "$0" || true`
LINKDIRNAME=`dirname "$READLINK"`
NORMDIR="$LINKDIRNAME"
[ ! "${LINKDIRNAME:0:1}" = "/" ] && NORMDIR="$DIRNAME/$LINKDIRNAME"
NORMDIR=`cd "$NORMDIR"; pwd`

. "$NORMDIR"/norm_common

##
## set up variables

## in $HOME:
## norm.bootstrap.$MACHINEID <-- bootstrap prefix -- gcc and tools needed to work
## norm.test.$MACHINEID      <-- prefix, completely deleted between formulas

## in $NORMDIR:
## testlogs/$MACHINEID.tar.gz             <-- bootstrap archive
## testlogs/$MACHINEID/$FORMULA_ID.log.gz <-- log for each formula
BOOTSTRAP_NAME="norm.bootstrap.$MACHINEID"
BOOTSTRAP_ARCHIVE="$NORMDIR/testlogs/$MACHINEID.tar.gz"
BOOTSTRAP_LOG="$NORMDIR/testlogs/$MACHINEID.log"
BOOTSTRAP_PREFIX="$HOME/$BOOTSTRAP_NAME"
NORMTEST_PREFIX="$HOME/norm.test.$MACHINEID"
NORMTEST_PREFIXNAME=`basename "$NORMTEST_PREFIX"`
NORMTEST_PREFIXDIR=`dirname "$NORMTEST_PREFIX"`
LOGPATH="$NORMDIR/testlogs/$MACHINEID"

## create output directories
mkdir -p "$NORMDIR/testlogs"
mkdir -p "$LOGPATH"

##
## prepare bootstrap
if [ ! -e "$BOOTSTRAP_ARCHIVE" ]; then ## we do not have bootstrap archive, make our own
    ## get everything out of the way
    rm -rf "$BOOTSTRAP_PREFIX"

    BOOTSTRAP_FORMULAS=(xz ccache curl wget bzip2)
    have_gcc 6.1 || BOOTSTRAP_FORMULAS+=(gcc)

    ## clear the bootstrap log
    > "$BOOTSTRAP_LOG"

    ## build the set that can compile all our formulas
    for formula in "${BOOTSTRAP_FORMULAS[@]}"; do
        "$NORMDIR"/norm -p "$BOOTSTRAP_PREFIX" install "$formula" 2>&1 | tee -a "$BOOTSTRAP_LOG"
    done

    ## bootstrap's bin will be in PATH, so remove stuff that will get in our way
    rm -vf "$BOOTSTRAP_PREFIX"/bin/{attr,c_rehash,chacl,curl-config,getfacl,getfattr,idn,setfacl,setfattr}
    rm -vf "$BOOTSTRAP_PREFIX"/bin/*pkg-config

    ## compiled gcc is very big, strip out the debug symbols
    strip -gp "$BOOTSTRAP_PREFIX"/bin/* || true
    strip -gp "$BOOTSTRAP_PREFIX"/libexec/gcc/*/*/* || true

    ## archive the bootstrap
    tar zcf "$BOOTSTRAP_ARCHIVE" -C "$HOME" "$BOOTSTRAP_NAME"
    ## compress bootstrap compile log
    gzip "$BOOTSTRAP_LOG"
fi

##
## unpack bootstrap into clean location
rm -rf "$BOOTSTRAP_PREFIX"
tar zxf "$BOOTSTRAP_ARCHIVE" -C "$HOME"

## we don't want pipefail anymore -- failures to compile are handles by ourselves from now on
set +o pipefail

## we want access to bootstrap's gcc and it's libraries (libstdc++.so, for example)
export PATH="$BOOTSTRAP_PREFIX/bin/ccache_wrap:$BOOTSTRAP_PREFIX/bin:$PATH"
export LD_LIBRARY_PATH="$BOOTSTRAP_PREFIX/lib${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}"

## check if were given list of packages, if not, try all of them
LIST=($@)
[ -z "$LIST" ] && LIST=("$NORMDIR"/packages/*)

##
## compile each package and save logs
for FORMULA_NAME in "${LIST[@]}"; do
    # calculate formula name and file path
    FORMULA_NAME=${FORMULA_NAME#$NORMDIR/packages/} ## get rid of paths if any
    FORMULA_FILE="$NORMDIR/packages/$FORMULA_NAME"  ## we want full path here
    [ -f "$FORMULA_FILE" ] || continue              ## must be a file

    # calculate formula ID
    SHA1SUM=`$SHASUM_BIN "$FORMULA_FILE" | cut -f1 -d' '`
    FORMULA_ID="$FORMULA_NAME.$SHA1SUM"

    # check if we've done this formula before
    [ -f "$LOGPATH/$FORMULA_ID.log.gz" ] && continue ## successful logfile exists, skip the formula

    # clean up output prefix
    rm -rf "$NORMTEST_PREFIX"
    # clean up output logfiles
    rm -f "$LOGPATH/$FORMULA_NAME".*

    unset FAILURE

    # do it
    "$NORMDIR/norm" -p "$NORMTEST_PREFIX" install "$FORMULA_NAME" 2>&1 | tee "$LOGPATH/$FORMULA_ID.log"
    BUILDSTATUS="${PIPESTATUS[0]}"
    [[ $BUILDSTATUS != 0 && -n $ABORT_ON_FAIL ]] && echo "Formula $FORMULA_NAME failed to build, aborting" && exit 1
    [ $BUILDSTATUS != 0 ] && FAILURE=1

    # compile success, check if ldd has any output
    env - "$NORMDIR/norm-ldd" -q "$NORMTEST_PREFIX" | tee -a "$LOGPATH/$FORMULA_ID.log"
    [ "${PIPESTATUS[0]}" != "0" ] && FAILURE=1

    # write list of packages that had been built
    "$NORMDIR/norm" -p "$NORMTEST_PREFIX" list 2>&1 | tee -a "$LOGPATH/$FORMULA_ID.log"

    if [ -z "$FAILURE" ]; then
        gzip "$LOGPATH/$FORMULA_ID.log"
    else
        tar zcvf "$LOGPATH/$FORMULA_ID.tar.gz" -C "$NORMTEST_PREFIXDIR" "$NORMTEST_PREFIXNAME"
    fi
done

##
## list package names that didn't build cleanly
ERRORS=($LOGPATH/*.log)
if [ -n "$ERRORS" ] && [ -e "$ERRORS" ]; then
    echo These packages have failed to build:
    for file in "${ERRORS[@]}"; do
        [ -e "$file" ] || continue
        # normalize the formula name out of the logpath
        FORMULA=${file%.*.log}
        FORMULA=${FORMULA#$LOGPATH/}
        echo $FORMULA
    done
    exit 1
fi
