#!/usr/bin/env bash
set -eE

DIRNAME=`dirname "$0"`
READLINK=`readlink "$0" || true`
LINKDIRNAME=`dirname "$READLINK"`
NORMDIR="$LINKDIRNAME"
[ ! "${LINKDIRNAME:0:1}" = "/" ] && NORMDIR="$DIRNAME/$LINKDIRNAME"
NORMDIR=`cd "$NORMDIR"; pwd`

. "$NORMDIR"/norm_common

##
## set up variables

## in $HOME:
## norm.bootstrap.$MACHINEID <-- bootstrap prefix -- gcc and tools needed to work
## norm.test.$MACHINEID      <-- prefix, completely deleted between formulas

## in $NORMDIR:
## normtest/$MACHINEID.tar.xz             <-- bootstrap archive
## normtest/$MACHINEID/$FORMULA_ID.log.gz <-- log for each formula
BOOTSTRAP_NAME="norm.bootstrap.$MACHINEID"
BOOTSTRAP_ARCHIVE="$NORMDIR/normtest/$MACHINEID.tar.xz"
BOOTSTRAP_PREFIX="$HOME/$BOOTSTRAP_NAME"
NORMTEST_PREFIX="$HOME/norm.test.$MACHINEID"
LOGPATH="$NORMDIR/normtest/$MACHINEID"

##
## prepare bootstrap
if [ ! -e "$BOOTSTRAP_ARCHIVE" ]; then
    rm -rf "$BOOTSTRAP_PREFIX"
    ## we do not have bootstrap archive, make our own
    "$NORMDIR"/norm -p "$BOOTSTRAP_PREFIX" install ccache # needs to be installed first
    "$NORMDIR"/norm -p "$BOOTSTRAP_PREFIX" install tar # old tar won't support xz, fix that and make other compilations use it
    "$NORMDIR"/norm -p "$BOOTSTRAP_PREFIX" install xz bzip2 gzip curl
    "$NORMDIR"/norm -p "$BOOTSTRAP_PREFIX" install gcc

    ## bootstrap's bin will be in PATH, so remove stuff that will get in our way
    rm -vf "$BOOTSTRAP_PREFIX"/bin/{attr,c_rehash,chacl,curl-config,getfacl,getfattr,idn,setfacl,setfattr}
    rm -vf "$BOOTSTRAP_PREFIX"/bin/*pkg-config
    ## compiled gcc is very big, strip out the debug symbols
    strip -gp "$BOOTSTRAP_PREFIX"/bin/* || true
    strip -gp "$BOOTSTRAP_PREFIX"/libexec/gcc/*/*/* || true
    ## archive the bootstrap
    mkdir -p "$NORMDIR/normtest"
    tar cf - -C "$HOME" "$BOOTSTRAP_NAME" | xz > "$BOOTSTRAP_ARCHIVE"
fi
##
## unpack bootstrap into clean location
rm -rf "$BOOTSTRAP_PREFIX"
xzcat "$BOOTSTRAP_ARCHIVE" | tar xf - -C "$HOME"

##
## compile each package and save logs
export PATH="$BOOTSTRAP_PREFIX/bin/ccache_wrap:$BOOTSTRAP_PREFIX/bin:$PATH"

LIST=($@)
[ -z "$LIST" ] && LIST=("$NORMDIR"/packages/*)
for FORMULA_NAME in "${LIST[@]}"; do
    # calculate formula name and file path
    FORMULA_NAME=${FORMULA_NAME#$NORMDIR/packages/} ## get rid of paths if any
    FORMULA_FILE="$NORMDIR/packages/$FORMULA_NAME"  ## we want full path here
    [ -f "$FORMULA_FILE" ] || continue              ## must be a file

    # calculate formula ID
    SHA1SUM=`$SHASUM_BIN "$FORMULA_FILE" | cut -f1 -d' '`
    FORMULA_ID="$FORMULA_NAME.$SHA1SUM"

    # check if we've done this formula before
    [ -f "$LOGPATH/$FORMULA_ID.log.gz" ] && continue ## successful logfile exists, skip the formula

    mkdir -p "$LOGPATH"

    # clean up output prefix
    rm -rf "$NORMTEST_PREFIX"
    # clean up output logfiles
    rm -f "$LOGPATH/$FORMULA_NAME".*

    # do it
    "$NORMDIR/norm" -p "$NORMTEST_PREFIX" install "$FORMULA_NAME" 2>&1 | tee "$LOGPATH/$FORMULA_ID.log"
    [ "${PIPESTATUS[0]}" != "0" ] && continue ## compilation failed, nothing else to do

    # compile success, check if ldd has any output
    env - "$NORMDIR/norm-ldd" -q "$NORMTEST_PREFIX" | tee -a "$LOGPATH/$FORMULA_ID.log"
    [ "${PIPESTATUS[0]}" != "0" ] && continue ## ldd reports dependencies outside of prefix -- failed

    gzip "$LOGPATH/$FORMULA_ID.log"
done

##
## list package names that didn't build cleanly
ERRORS=($LOGPATH/*.log)
if [ -n "$ERRORS" ] && [ -e "$ERRORS" ]; then
    echo These packages have failed to build:
    for file in "${ERRORS[@]}"; do
        [ -e "$file" ] || continue
        # normalize the formula name out of the logpath
        FORMULA=${file%.*.log}
        FORMULA=${FORMULA#$LOGPATH/}
        echo $FORMULA
    done
    exit 1
fi
