#!/bin/bash

CAVEATS=()

onerror() {
    log "Package $FORMULA failed to build"
    local LOGDIR="$PREFIX"/var/log/norm
    local SHA1SUM=`$SHASUM_BIN "$NORMDIR/packages/$FORMULA" | cut -f1 -d' '`
    local logfile="$LOGDIR/$FORMULA.$SHA1SUM.log"
    finish_logs
    log "Last 50 lines of build log:"
    tail -n50 "$logfile" >&3
}

onexit() {
    for line in "${CAVEATS[@]}"; do log $line; done
    log "Exiting"
}

setup_traps() {
    set -eE
    set -o pipefail
    trap onerror ERR
    trap onexit EXIT
}

setup_logs() {
    local FORMULA="$1"
    local LOGDIR="$PREFIX"/var/log/norm
    local SHA1SUM=`$SHASUM_BIN "$NORMDIR/packages/$FORMULA" | cut -f1 -d' '`
    local logfile="$LOGDIR/$FORMULA.$SHA1SUM.log"
    mkdir -p `dirname "$logfile"`
    rm -f "$logfile"
    exec 3>&1 # save stdout to 3
    exec 4>&2 # save stderr to 4
    exec 2>>"$logfile"
    exec 1>>"$logfile"
}

finish_logs() {
    exec 1>&3 2>&4 ## restore stdout and stderr
    exec 3>&- 4>&- ## close fd's
}

log() {
    local DATE=`LANG=C date '+%d/%b/%Y:%T %z'`
    echo "[$DATE] [norm] $@"
    if [ -e /dev/fd/3 ]; then
        echo "[$DATE] [norm] $@" >&3;
    fi
}

log_success() {
    log "Package $FORMULA -- success"
}

pushd() {
    command pushd "$@" > /dev/null
}

popd() {
    command popd "$@" > /dev/null
}

pushd_src() {
    pushd "$SRCDIR"
}

popd_src() {
    popd
}

do_configure() {
    log "Configuring $FORMULA $@"
    ./configure --prefix="$PREFIX" "$@" || return 1
}

do_configure_outside() {
    log "Configuring $FORMULA $@"
    "$SRCDIR"/configure --prefix="$PREFIX" "$@" || return 1
}

do_make() {
    log "Making $FORMULA $@"
    local PARALLEL="-j$NUMJOBS"
    [ "$NOPARALLEL" = "1" ] && PARALLEL=
    make $PARALLEL "$@" || return 1
}

do_install() {
    log "Installing $FORMULA $@"
    make install "$@" || return 1
}

do_make_and_install() {
    do_make "$@" || return 1
    do_install "$@" || return 1
}

do_compile() {
    pushd_src || return 1
    do_configure "$@" || return 1
    do_make_and_install || return 1
    popd || return 1
}


do_compile_outside() {
    local BUILDDIR="$SRCDIR"-build

    rm -rf "$BUILDDIR" || return 1
    mkdir -p "$BUILDDIR" || return 1
    pushd "$BUILDDIR" || return 1
    do_configure_outside "$@" || return 1
    do_make_and_install || return 1
    popd || return 1
}

##
## unpacks source code
## sets global SRCDIR and TARNAME
##
## usage: do_unpack <-- gets filename from fetch_source
##
## alternative usage: do_unpack foo-1.2.3.tar.bz2
do_unpack() {
    [ -f "$TARDIR/$1" ] && TARNAME="$1" && shift
    [ -z "$TARNAME" ] && echo "TARNAME is empty!" && return 1

    SRCDIR="$COMPILEDIR/$TARNAME"

    log "Unpacking $TARNAME"
    rm -rf "$SRCDIR"  || return 1
    mkdir -p "$SRCDIR"  || return 1
    tar -xf "$TARDIR/$TARNAME" -C "$SRCDIR" --strip-components 1 "$@" || return 1
    log "Unpacked $TARNAME"
}

##
## unpacks source code inside other package's source code
##
## usage: intree_unpack <-- unpacks into same directory of do_unpack'ed package
## usage: intree_unpack tools/clang <-- unpacks into tools/clang subdirectory
intree_unpack() {
  log "Unpacking $TARNAME into $SRCDIR/$1"
  pushd_src
  if [ -n "$1" ]; then
    mkdir -p "$1"
    tar xf "$TARDIR/$TARNAME" --strip-components 1 -C "$1"
  fi
  if [ -z "$1" ]; then
    # mv -n would've worked better, but not all versions of mv have that flag
    mkdir -p "$TARNAME"
    tar xf "$TARDIR/$TARNAME" --strip-components 1 -C "$TARNAME"
    for x in "$TARNAME"/*; do
      local file=${x#$TARNAME/}
      [ ! -e "$file" ] && ln -s "$x" .
    done
  fi
  popd
  log "Unpacked $TARNAME into $SRCDIR/$1"
}

##
## unpacks source code and applies debian patches
## sets global TARNAME and DEBPATCH
##
## usage: do_undebian <-- gets filenames from fetch_source and fetch_debian
##
## alternative usage: do_undebian foo-1.2.3.orig.tar.bz2 foo-1.2.3.debian.tar.gz
do_undebian() {
    [ -f "$TARDIR/$1" ] && TARNAME="$1"
    [ -f "$TARDIR/$2" ] && DEBPATCH="$2"

    ## sets SRCDIR
    do_unpack "$TARNAME" || return 1
    do_debianize "$DEBPATCH" || return 1
}

##
## applies debian patches, sets global DEBPATCH
##
## usage: do_debianize <-- gets filename from fetch_debian
##
## alternative usage: do_debianize foo-1.2.3.debian.tar.gz
do_debianize() {
    [ -f "$TARDIR/$1" ] && DEBPATCH="$1"

    do_undebian_overlay "$DEBPATCH"
    do_debian_patches
}

do_undebian_overlay() {
    [ -f "$TARDIR/$1" ] && DEBPATCH="$1"

    ## unpack debian overlay -- try tar, gzip, xz, bz
    tar -xf "$TARDIR/$DEBPATCH" -C "$SRCDIR" ||
    gzip -cd "$TARDIR/$DEBPATCH" | patch -f -p1 -i - -d "$SRCDIR" ||
    xzcat "$TARDIR/$DEBPATCH" | patch -f -p1 -i - -d "$SRCDIR" ||
    bzcat "$TARDIR/$DEBPATCH" | patch -f -p1 -i - -d "$SRCDIR" || return 1
}

do_debian_patches() {
    ## apply debian patches
    local SERIES="$SRCDIR"/debian/patches/series
    local SERIES2="$SRCDIR"/debian/patches-applied/series
    local PATCHES="$SRCDIR"/debian/patches/*.patch
    if [ -e "$SERIES" ]; then
        PATCHES=`cat "$SERIES"|perl -pe "s/#.*$//g;s|^|$SRCDIR/debian/patches/|"`
    elif [ -e "$SERIES2" ]; then
        PATCHES=`cat "$SERIES2"|perl -pe "s/#.*$//g;s|^|$SRCDIR/debian/patches-applied/|"`
    fi
    for i in $PATCHES; do
        [ -e "$i" ] || continue
        echo Applying patch "$i"
        patch -f -p1 -i "$i" -d "$SRCDIR" ||
        patch -f -p0 -i "$i" -d "$SRCDIR" ||
        patch -f -p2 -i "$i" -d "$SRCDIR" || true
    done
}

##
## unpacks source code, applies debian patches, runs configure, make, install
##
## usage: do_undebian_compile <-- gets filenames from fetch_source and fetch_debian
##
## alternative usage: do_undebian_compile foo-1.2.3.orig.tar.bz2 foo-1.2.3.debian.tar.gz
do_undebian_compile() {
    if [ -f "$TARDIR/$1" -a -f "$TARDIR/$2" ]; then
        TARNAME="$1"
        DEBPATCH="$2"
        shift 2
    fi
    do_undebian
    do_compile "$@"
}

##
## unpacks source code, runs configure, make, install
##
## usage: do_unpack_compile <-- gets filename from fetch_source
##
## alternative usage: do_unpack_compile foo-1.2.3.tar.bz2
do_unpack_compile() {
    if [ -f "$TARDIR/$1" ]; then
        TARNAME="$1"
        shift 1
    fi
    do_unpack "$TARNAME"
    do_compile "$@"
}

##
## applies a patch in $SRCDIR, takes it from 'patches' directory in NORM
## default is -p1, but you can override that after patchname
##
## usage: do_patch gcc-4.9.2-multiarch-support.patch
## usage: do_patch binutils-multiarch-support.patch -p2
##
do_patch() {
    local PATCHNAME="$1"
    shift
    patch -p1 -f -i "$NORMDIR"/patches/"$PATCHNAME" -d "$SRCDIR" "$@"
}

do_patch_inline() {
    patch -p1 -l -N -f -d "$SRCDIR" "$@"
}

do_autoreconf() {
    pushd_src || return 1
    autoreconf -f -i -v || return 1
    popd || return 1
}

## usage: compile_package FORMULA [what formula asked for this one]
## note about force option -- it's passed as parameter so forcing package A won't force package B that A depends on
compile_package() {
    local COMPILING_FOR force FORMULA
    local DATE=`LANG=C LC_ALL=C date`
    [ "$1" == "-f" ] && force=-f && shift

    FORMULA="$1"
    [ -n "$2" ] && COMPILING_FOR="$2"
    local STATEDIR="$PREFIX"/var/norm
    if [ ! -e "$STATEDIR"/"$FORMULA".installed -o -n "$force" ]; then
        [ -z "$COMPILING_FOR" ] && log "Building package: $FORMULA" \
                                || log "Building package: $FORMULA -- dependency of $COMPILING_FOR"
        [ ! -e "$NORMDIR"/packages/"$FORMULA" ] && log "Error: Package file '$FORMULA' does not exist" && return 1
        . "$NORMDIR"/packages/"$FORMULA"
        mkdir -p `dirname "$STATEDIR/$FORMULA"`
        log_success
        touch "$STATEDIR/$FORMULA".installed
        ## remove artifacts
        [ -z "$norm_keep_sources" -a -n "$COMPILEDIR" -a -n "$TARNAME" ] && rm -rf "$COMPILEDIR/$TARNAME"
    else
        [ -z "$COMPILING_FOR" ] && log "Package already installed: $FORMULA"
    fi
    [ -n "$COMPILING_FOR" ] && echo "[$DATE] Needed for $COMPILING_FOR" >> "$STATEDIR/$FORMULA".installed || true
}

depends_on() {
    for i; do
        compile_package "$i" $FORMULA
    done
}

fetch_file() {
    [ -z "$1" ] && echo "fetch_file() needs at least 1 argument" && return 1
    local URL="$1"
    local SHA1="$2"
    local FILENAME=`basename -- "$URL"`
    mkdir -p "$TARDIR"
    if [ ! -e "$TARDIR"/$FILENAME ]; then
        log "Downloading $URL"
        curl -L -R "$URL" -o "$TARDIR"/$FILENAME.temp || (rm -f "$TARDIR"/$FILENAME.temp && return 1)
        mv -f "$TARDIR"/$FILENAME{.temp,}
    fi
    SHA1SUM=`$SHASUM_BIN "$TARDIR/$FILENAME" | cut -f1 -d' '`
    [ -z "$SHA1" ] && echo "For future -- SHA1 of $FILENAME is $SHA1SUM"
    if [ ! -z "$SHA1" ] && [ "$SHA1SUM" != "$SHA1" ]; then
        log "SHA1sum mismatch! $SHA1SUM vs $SHA1"
        false
    fi
}

fetch_source() {
    local URL="$1"
    TARNAME=`basename -- "$URL"`
    fetch_file "$@"
}

fetch_debian() {
    local URL="$1"
    DEBPATCH=`basename -- "$URL"`
    fetch_file "$@"
}

##
## example: test_cc 'main() { return 0;}' -O2
test_cc() {
    CODE="$1"
    shift
    echo "$CODE" | cc -x c "$@" -o /dev/null - 2>/dev/null || true
    local STATUS=${PIPESTATUS[1]}
    [ -n "$STATUS" ] && return $STATUS
    return 1
}

##
## example: cc_checkflags -Wl,-Bsymbolic -O2
cc_checkflags() {
    test_cc 'int main() { int i; return 0;}' "$@"
}

##
## check if compiler will accept the flag
## first one accepted is added to specified variable
##
## example: cc_addflag EXTRA_CFLAGS -march=native -march=core2 -march=i686
## example: cc_addflag EXTRA_CFLAGS -Wextra -W
cc_addflag() {
    [ -z "$1" -o -z "$2" ] && return
    local value VARNAME=$1
    shift 1
    for value; do
        [[ "${!VARNAME}" =~ "(^| )$value( |$)" ]] && return # already have it
        cc_checkflags $CFLAGS ${!VARNAME} $value || continue
        export $VARNAME="${!VARNAME} $value"
        return
    done
}

##
## check if compiler will accept the flags
## any flag that gets accepted will be added to specified variable
cc_addflags() {
    [ -z "$1" -o -z "$2" ] && return
    local value VARNAME=$1
    shift 1
    for value; do
        [[ "${!VARNAME}" =~ "(^| )$value( |$)" ]] && continue # already have it
        cc_checkflags $CFLAGS ${!VARNAME} $value || continue
        export $VARNAME="${!VARNAME} $value"
    done
}


## test_cc_value "fcntl.h" "O_CLOEXEC"
test_cc_value() {
    test_cc "#define _GNU_SOURCE
#include <$1>
int main() { int a = $2; return 0;}"
}

## test_cc_func "stdio.h" 'printf("Hello, world!\n");'
test_cc_func() {
    test_cc "#include <$1>
int main() { $2; return 0;}"
}


## Example: have_gcc 4.7
have_gcc() {
    [ -z "$1" ] && echo "have_gcc() needs an argument" && return 1
    local HAVE_GCC_RAW=`gcc -dumpversion`
    local HAVE_GCC=`echo "$HAVE_GCC_RAW" | sed -e 's/\.\([0-9][0-9]\)/\1/g' -e 's/\.\([0-9]\)/0\1/g' -e 's/^[0-9]\{3,4\}$/&00/'`
    local ASKED_GCC=`echo "$1" | sed -e 's/\.\([0-9][0-9]\)/\1/g' -e 's/\.\([0-9]\)/0\1/g' -e 's/^[0-9]\{3,4\}$/&00/'`
    [ "$HAVE_GCC" -lt "$ASKED_GCC" ] && return 1
    return 0
}

## Example: require_gcc 4.7
## Same as have_gcc, but prints a message doesn't print a message
requires_gcc() {
    [ -z "$1" ] && echo "require_gcc() needs an argument" && return 1
    if ! have_gcc "$1"; then
        local NEED_GCC_RAW="$1"
        shift
        local HAVE_GCC_RAW=`gcc -dumpversion`
        log "Package $FORMULA needs GCC at least $NEED_GCC_RAW $@"
        log "You have $HAVE_GCC_RAW"
        log ""
        log "Type 'norm install gcc' to install fresh gcc"
        exit 1 ## we don't want onerror() to type 'package failed to build'
    fi
    return 0
}

add_to_ccache() {
    mkdir -p $PREFIX/bin/ccache_wrap
    for name in "$@"; do
        ln -fs ../ccache $PREFIX/bin/ccache_wrap/"$name"
    done
}

add_caveat() {
    CAVEATS+=("Formula $FORMULA has a message for you:")
    for line; do
        CAVEATS+=("$line")
    done
    CAVEATS+=("")
}

is_without() {
    [ -z "$1" ] && return 1
    [[ "$1" == *" "* ]] && return ## don't allow whitespace
    local name=is_without_${1}
    [ -n "${!name}" ] && return 0
    return 1
}

is_with() {
    [ -z "$1" ] && return 1
    [[ "$1" == *" "* ]] && return ## don't allow whitespace
    local name=is_with_${1}
    [ -n "${!name}" ] && return 0
    return 1
}

set_without() {
    [ -z "$1" ] && return
    [[ "$1" == *" "* ]] && return ## don't allow whitespace
    log Setting without "$1"
    printf -v "is_without_${1}" %s "1"
}

set_with() {
    [ -z "$1" ] && return
    [[ "$1" == *" "* ]] && return ## don't allow whitespace
    log Setting with "$1"
    printf -v "is_with_${1}" %s "1"
}
