#!/usr/bin/env perl

use warnings;
use strict;
use Getopt::Long;

use File::Find;

sub usage {
    print "Usage: $0 [-v] [-q] <full-prefix-path>\n";
    exit 64;
}

my $verbose = '';
my $quiet = '';
GetOptions ("verbose+" => \$verbose,
            "quiet+" => \$quiet) or usage();

if (@ARGV < 1) {
    usage();
}

my $prefix = $ARGV[0];
# strip trailing slashes
while ($prefix =~ /\/\z/) {
    $prefix =~ s|/\z||g;
}


my @files;
sub eachFile {
    return if not -f;
    return if -l;
    return if /(README|INSTALL|COPYING)$/;
    return if /\.(py|pyo|pyc|ri|rb|js|rhtml)$/;
    return if /\.(def|decTest|m4|txt|pc|la|syntax|installed)$/;
    return if /\.(c|h|fon|am|pm|tcl|sl|xml|sh|msg|map|info|pem|ini|hlp|mo|po)$/;
    return if /\.(sample|ttf|css|html|pub|ac|in|inc|sub|conf|site|cnf|pod|el)$/;
    return if /\.(gir|cmake|rules|pickle|tmpl|typelib|packlist)$/;
    return if /\.(gif|png|jpg|jpeg|bmp|pbm|pgm|ppm|ras|sgi|tiff?|xbm|svg)$/;
    return if /\.(aiff|au|wav|aifc|aif)$/;
    return if /\.(x|xbn|xc|xd|xdc|xdw|xn|xr|xs|xsc|xsw|xu|xw)$/;
    return if /\.(a|gox)$/;
    return if /\.(xsl|xsd|rng|docbook|ent|mod|cat)$/;

    my $fullpath = $File::Find::name;
    return if ($fullpath =~ m"/include/");
    return if ($fullpath =~ m"/share/cmake");
    return if ($fullpath =~ m"/share/doc/");
    return if ($fullpath =~ m"/share/gtk-doc/");
    return if ($fullpath =~ m"/share/info/");
    return if ($fullpath =~ m"/share/man");
    return if ($fullpath =~ m"/share/terminfo/");
    return if ($fullpath =~ m"/share/X11/locale/");
    return if ($fullpath =~ m"/bash_completion.d/");
    return if ($fullpath =~ m"/var/cache/");
    return if ($fullpath =~ m"/tmp/compile/");
    push (@files, $fullpath);
}

find (\&eachFile, $prefix);

if ($verbose) {
    print join("\n", @files) . "\n";
}

if (!$quiet) {
    print "Found " . scalar(@files) . " files, checking if they have dependencies outside norm's prefix...\n";
}

delete $ENV{'LD_LIBRARY_PATH'};

my $retstatus = 0;
my $filtered_prefix = quotemeta($prefix);
foreach my $arg (@files) {
    my $output = `ldd "$arg" 2>&1`;
    my $filtered_output = "";
    foreach (split(/\n/, $output)) {
	next if /not a dynamic executable/;
	next if /statically linked/;
	next if m|$filtered_prefix/|;
	next if /^[\t]linux-(gate|vdso)\.so\.1 (=>  )?\(/;
	next if /^[\t]lib(c|m|dl|rt|pthread|resolv|crypt|util|nsl)\.so/;
	next if /^[\t]lib(gcc_s|stdc\+\+|ssp|gomp)\.so/;
	next if /^[\t]\/lib\/ld-linux\.so\.2/;
	next if /^[\t]\/lib64\/ld-linux-x86-64\.so\.2/;
	$filtered_output .= $_ . "\n";
    }
    if (length $filtered_output) {
	print "$arg:\n";
	print $filtered_output;
	$retstatus = 1;
    }
}

exit $retstatus;
