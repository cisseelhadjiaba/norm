#!/bin/bash

requires_gcc 4.7

depends_on cmake  ## since llvm 3.9, cmake is the only way to build this
depends_on python ## needs python 2.7 to compile
depends_on libxml ## c-index-test has dynamic dependency on it
depends_on zlib
depends_on libffi
depends_on libedit

ENABLE_SANITIZER=yes
if ! test_cc_expr "link.h" "Elf64_Dyn a = _DYNAMIC[0]"; then
    ENABLE_SANITIZER=no
    add_caveat "Your libc doesn't have _DYNAMIC in <link.h>, sanitizer support was disabled."
fi

fetch_source http://releases.llvm.org/4.0.0/llvm-4.0.0.src.tar.xz aee4524e2407f9fe5afc6f70c753180b907011d0
do_unpack
rm -f "$SRCDIR"/configure
if [[ ${BASH_SOURCE##*/} == clang ]]; then
    fetch_source http://releases.llvm.org/4.0.0/cfe-4.0.0.src.tar.xz e2762800c93d9335781ea6a45af3f80845542ef5
    intree_unpack tools/clang

    if [[ $ENABLE_SANITIZER == yes ]]; then
        fetch_source http://releases.llvm.org/4.0.0/compiler-rt-4.0.0.src.tar.xz a879b610e427ef3bba482bdc031ae371cabab81e
        intree_unpack projects/compiler-rt
    fi

    fetch_source http://releases.llvm.org/4.0.0/clang-tools-extra-4.0.0.src.tar.xz bdb543c4bb87bd80fe65711114ca0a5c25329ae3
    intree_unpack tools/clang/tools/extra
fi

## this fixes musl
do_patch_inline -p0 << 'EOF'
--- lib/Support/DynamicLibrary.cpp
+++ lib/Support/DynamicLibrary.cpp
@@ -140,10 +140,10 @@
 #define EXPLICIT_SYMBOL(SYM) \
    if (!strcmp(symbolName, #SYM)) return &SYM
 
-// On linux we have a weird situation. The stderr/out/in symbols are both
+// On GNU libc we have a weird situation. The stderr/out/in symbols are both
 // macros and global variables because of standards requirements. So, we
 // boldly use the EXPLICIT_SYMBOL macro without checking for a #define first.
-#if defined(__linux__) and !defined(__ANDROID__)
+#if defined(__GLIBC__)
   {
     EXPLICIT_SYMBOL(stderr);
     EXPLICIT_SYMBOL(stdout);
--- include/llvm/Analysis/TargetLibraryInfo.h
+++ include/llvm/Analysis/TargetLibraryInfo.h
@@ -18,6 +18,15 @@
 #include "llvm/IR/Module.h"
 #include "llvm/Pass.h"
 
+#undef fopen64
+#undef fseeko64
+#undef fstat64
+#undef fstatvfs64
+#undef ftello64
+#undef lstat64
+#undef stat64
+#undef tmpfile64
+
 namespace llvm {
 /// VecDesc - Describes a possible vectorization of a function.
 /// Function 'VectorFnName' is equivalent to 'ScalarFnName' vectorized
EOF

NOPARALLEL=1 \
do_compile_outside \
	-DLLVM_OPTIMIZED_TABLEGEN=ON \
	-DLLVM_BUILD_LLVM_DYLIB=ON \
	-DLLVM_BUILD_TESTS=ON \
	-DLLVM_BUILD_EXAMPLES=OFF \
	-DLLVM_ENABLE_FFI=ON \
	-DLLVM_ENABLE_ZLIB=ON \
	-DLLVM_LINK_LLVM_DYLIB=ON
