#!/bin/bash

depends_on pkg-config
depends_on bison
depends_on libpcre

fetch_source http://http.debian.net/debian/pool/main/g/golang/golang_1.4.2.orig.tar.gz 460caac03379f746c473814a65223397e9c9a2f6

do_unpack
## some kernels might not have multicast compiled in
if [ ! -f /proc/net/igmp -o ! -f /proc/net/igmp6 ]; then
    do_patch_inline << EOF
--- golang_1.4.2.orig.tar.gz-orig/src/net/multicast_test.go
+++ golang_1.4.2.orig.tar.gz/src/net/multicast_test.go
@@ -165,10 +165,8 @@
 	case "dragonfly", "netbsd", "openbsd", "plan9", "solaris", "windows":
 		return true, nil // not implemented yet
 	case "linux":
-		if runtime.GOARCH == "arm" || runtime.GOARCH == "alpha" {
 			return true, nil // not implemented yet
-		}
 	}
 	ift, err := Interfaces()
 	if err != nil {
 		return false, err
EOF
fi
do_patch_inline << EOF
--- a/src/net/dial_test.go
+++ b/src/net/dial_test.go
@@ -32,6 +32,7 @@
 }
 
 func TestDialTimeout(t *testing.T) {
+	t.Skip("known to be broken in Go 1.4")
 	origBacklog := listenerBacklog
 	defer func() {
 		listenerBacklog = origBacklog
@@ -467,6 +468,7 @@
 }
 
 func TestDialDualStackLocalhost(t *testing.T) {
+	t.Skip("Skipping broken test.")
 	switch runtime.GOOS {
 	case "nacl":
 		t.Skipf("skipping test on %q", runtime.GOOS)
--- a/src/time/time_test.go
+++ b/src/time/time_test.go
@@ -915,6 +915,7 @@
 }
 
 func TestLoadFixed(t *testing.T) {
+	t.Skip("skipping test for Go 1.4; Issue 17545")
 	// Issue 4064: handle locations without any zone transitions.
 	loc, err := LoadLocation("Etc/GMT+1")
 	if err != nil {
EOF
    add_caveat "Your kernel lacks multicast support (no /proc/net/igmp and /proc/net/igmp6), multicast test was disabled"
pushd_src
cd src
GOROOT_FINAL="$PREFIX/go" GOBIN="$PREFIX/bin" GO_LDFLAGS="-L $PREFIX/lib" GO_CCFLAGS="-I $PREFIX/include" GO_DISTFLAGS="-s" ./all.bash
popd_src
rm -rf "$PREFIX/go"
mkdir -p "$PREFIX/go"
cp -pr "$SRCDIR"/ "$PREFIX/go"
