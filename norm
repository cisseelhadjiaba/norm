#!/usr/bin/env bash
set -eE

DIRNAME=`dirname "$0"`
READLINK=`readlink "$0" || true`
LINKDIRNAME=`dirname "$READLINK"`
NORMDIR="$LINKDIRNAME"
[ ! "${LINKDIRNAME:0:1}" = "/" ] && NORMDIR="$DIRNAME/$LINKDIRNAME"
NORMDIR=`cd "$NORMDIR"; pwd`

. "$NORMDIR"/norm_common

PREFIX="$DEFAULT_PREFIX"

## root users must use distro's package manager
[ $EUID == "0" ] && log "Error: I will not run for root user." && exit 1

## cc sanity check
if ! test_cc_func "stdio.h" 'printf("Hello, world!\n");'; then
    log "Error: your compiler can't compile!"
    log "Check that your have it installed correctly"
    exit 1
fi

## curl availability check
if ! hash curl 2>/dev/null; then
    log "Error: you don't have curl installed in your PATH"
    log "Can't compile anything, sorry"
    exit 1
fi

usage() {
    echo "Usage:"
    echo "    $OURNAME install <package> [package ...]   -- install package(s)"
    echo "    $OURNAME reinstall <package> [package ...] -- reinstall already installed package(s)"
    echo "    $OURNAME list                              -- list all installed packages"
    echo "    $OURNAME ldd                               -- check for dynamic dependencies outside of prefix"
    echo "    $OURNAME sub                               -- subshell with all prefix variables set"
    echo
    echo "Common options:"
    echo "    -p <prefix> -- full path to custom prefix instead of default one"
    echo
    echo "Install options:"
    echo "    -f          -- force install, same as reinstall command"
    echo "    -k          -- after successful install, keep source code in $COMPILEDIR"
    echo
    echo "ldd options:"
    echo "    -v          -- show list of files that will be fed to ldd"
    echo
    echo "Maintainer commands:"
    echo "    $OURNAME testall  -- compile every package and save the result into separate logfiles"
}

cmd_install() {
    local force
    norm_keep_sources=
    while getopts "fkv" opt; do
        case $opt in
        f)
            readonly force=-f
            ;;
        k)
            readonly norm_keep_sources=1
            ;;
        esac
    done
    shift $((OPTIND-1))
    local argument
    for argument; do
        [[ "$argument" == --with-* ]] && set_with "${argument#--with-}"
        [[ "$argument" == --without-* ]] && set_without "${argument#--without-}"
    done
    [ -z "$1" ] && log "Need package names" && exit 64
    [ -n "$force" ] && log "Forcing reinstall of packages: $@" \
                    || log "Installing packages: $@"
    setup_traps
    setup_prefix "$PREFIX"
    for FORMULA; do
        [[ "$FORMULA" == --* ]] && continue ## ignore flags
        compile_package $force "$FORMULA"
    done
}

cmd_sub() {
    log "Creating subshell so you can compile and link against norm libs"
    setup_prefix "$PREFIX"
    $SHELL -i
}

cmd_ldd() {
    local verbose
    while getopts "v" opt; do
        case $opt in
        v)
            verbose=-v
            ;;
        esac
    done
    "$NORMDIR"/norm-ldd $verbose "$PREFIX"
}

cmd_list() {
    local STATEDIR="$PREFIX"/var/norm
    for file in "$STATEDIR"/*installed; do
        [ -e "$file" ] || continue
        basename -- "$file" .installed | perl -pe 's/\.[0-9a-f]{40}$//'
    done
}

cmd_upgrade() {
    local STATEDIR="$PREFIX"/var/norm
    local FORMULAS=()
    for file in "$STATEDIR"/*installed; do
        [ -e "$file" ] || continue
        local formula=`basename -- "$file" .installed | perl -pe 's/\.[0-9a-f]{40}$//'`
        ## TODO: add SHA1SUM check
        FORMULAS+=($formula)
    done
    cmd_install "$@" "${FORMULAS[@]}"
}

cmd_testall() {
    pushd $NORMDIR
    ./norm-testall "$@"
    popd
}

while getopts ":p:" opt; do
    case $opt in
    p)
        PREFIX="$OPTARG"
        [ "${PREFIX:0:1}" != "/" ] && PREFIX="$PWD"/"$OPTARG"
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        usage
        exit 64
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        usage
        exit 64
        ;;
    esac
done

shift $((OPTIND-1))
OPTIND=1

[ -z "$1" ] && echo "No command specified" >&2 && usage && exit 64

case "$1" in
    install)
        shift
        cmd_install "$@"
        ;;
    sub)
        shift
        cmd_sub "$@"
        ;;
    ldd)
        shift
        cmd_ldd "$@"
        ;;
    list)
        shift
        cmd_list "$@"
        ;;
    upgrade)
        shift
        cmd_upgrade "$@"
        ;;
    reinstall)
        shift
        cmd_install -f "$@"
        ;;
    testall)
        shift
        cmd_testall "$@"
        ;;
    *)
        echo "Unknown command: $1" >&2
        usage
        exit 64
        ;;
esac

