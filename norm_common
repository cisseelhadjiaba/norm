#!/bin/bash

OURNAME=`basename -- $0`
TARDIR="$HOME/.cache/norm"
LIBSUFFIX=so
[[ $OSTYPE == *darwin* ]] && LIBSUFFIX=dylib

COMPILEDIR="$DEFAULT_PREFIX/tmp/compile"
NUMCPU=`getconf _NPROCESSORS_ONLN`
[ -z "$NUMCPU" ] && NUMCPU=1
NUMJOBS=$(( $NUMCPU * 2 ))

## find shasum binary
SHASUM_BIN=shasum
hash $SHASUM_BIN 2>/dev/null || SHASUM_BIN=sha1sum
CONFIGURE_FILTER=norm-configure-filter
perl ' use v5.10.0; ' 2>/dev/null || CONFIGURE_FILTER=cat

. $NORMDIR/norm_common.functions
. $NORMDIR/norm_common.prefix

onerror() {
    log "Package $FORMULA failed to build"
    local LOGDIR="$PREFIX"/var/log/norm
    local SHA1SUM=`$SHASUM_BIN "$NORMDIR/packages/$FORMULA" | cut -f1 -d' '`
    local logfile="$LOGDIR/$FORMULA.$SHA1SUM.log"
    finish_logs
    log "Last 50 lines of build log:"
    tail -n50 "$logfile"
}

onexit() {
    for line in "${CAVEATS[@]}"; do log $line; done
    log "Exiting"
}

setup_traps() {
    set -eE
    set -o pipefail
    trap onerror ERR
    trap onexit EXIT
}

setup_logs() {
    local FORMULA="$1"
    local LOGDIR="$PREFIX"/var/log/norm
    local SHA1SUM=`$SHASUM_BIN "$NORMDIR/packages/$FORMULA" | cut -f1 -d' '`
    local logfile="$LOGDIR/$FORMULA.$SHA1SUM.log"
    mkdir -p `dirname "$logfile"`
    rm -f "$logfile"
    exec 3>&1 # save stdout to 3
    exec 4>&2 # save stderr to 4
    if [ -z "$verbose" ]; then
        exec 1>"$logfile" 2>&1 # redirect all output to logfile
    else
        exec 1> >(tee "$logfile" >&3) 2>&1 # redirect all output to tee, which duplicates to stdout and logfile
    fi
}

finish_logs() {
    exec 1>&3 2>&4 ## restore stdout and stderr
    exec 3>&- 4>&- ## close fd's
}

log() {
    local DATE=`LANG=C date '+%d/%b/%Y:%T %z'`
    echo "[$DATE] [norm] $@"

    ## verbose was set, so this message was sent to terminal already
    [ -n "$verbose" ] && return

    ## duplicate this to terminal
    if [ -e /dev/fd/3 -a -z "$verbose" ]; then
        echo "[$DATE] [norm] $@" >&3
    fi
}

log_success() {
    log "Package $FORMULA -- success"
}

